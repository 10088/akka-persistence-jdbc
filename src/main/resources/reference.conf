# Copyright 2016 Dennis Vriend
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# the akka-persistence-journal in use
jdbc-journal {
  class = "akka.persistence.jdbc.journal.JdbcAsyncWriteJournal"
}

# the akka-persistence-snapshot-store in use
jdbc-snapshot-store {
  class = "akka.persistence.jdbc.snapshot.JdbcSnapshotStore"
}

# the akka-persistence-query provider in use
jdbc-read-journal {
  class = "akka.persistence.jdbc.query.journal.JdbcReadJournalProvider"
}

akka-persistence-jdbc {

  inMemory = off
  inMemoryTimeout = 5s

  slick {
    driver = "slick.driver.PostgresDriver"
    db {
      host = "boot2docker"
      host = ${?POSTGRES_HOST}
      port = "5432"
      port = ${?POSTGRES_PORT}
      name = "docker"

      url = "jdbc:postgresql://"${akka-persistence-jdbc.slick.db.host}":"${akka-persistence-jdbc.slick.db.port}"/"${akka-persistence-jdbc.slick.db.name}
      user = "docker"
      password = "docker"
      driver = "org.postgresql.Driver"
      keepAliveConnection = on
      numThreads = 2
      queueSize = 100
    }
  }

  tables {
    journal {
      tableName = "journal"
      schemaName = ""
      columnNames {
        persistenceId = "persistence_id"
        sequenceNumber = "sequence_number"
        created = "created"
        tags = "tags"
        message = "message"
      }
    }

    deletedTo {
      tableName = "deleted_to"
      schemaName = ""
      columnNames = {
        persistenceId = "persistence_id"
        deletedTo = "deleted_to"
      }
    }

    snapshot {
      tableName = "snapshot"
      schemaName = ""
      columnNames {
        persistenceId = "persistence_id"
        sequenceNumber = "sequence_number"
        created = "created"
        snapshot = "snapshot"
      }
    }
  }

  query {
    separator = ","
  }

  serialization {
    journal = on // alter only when using a custom dao
    snapshot = on // alter only when using a custom dao
  }

  // Custom dao implementations. Akka Persistence uses the DefaultJournalDao and
  // custom DefaultSnapshotDao. These dao implementations serialize the data model to byte
  // arrays that will be stored in the persistency store.
  // By creating your own custom JournalDao and/or custom SnapshotDao, how the data will be
  // persisted can be changed. For example, the default implementation stores the events and snapshots
  // as a blob in a serialized array, but it is possible to change this strategy and store the events
  // in multiple tables, eg. one EventLog table, that stores the persistenceId, sequenceNumber and event
  // identifier (Discriminator field). The event data will be stored in another table. This strategy stores
  // the events in a typed manner. Of course, the dao must implement all necessary administration so that
  // akka persistence can do its job.
  dao {
    journal = "akka.persistence.jdbc.dao.DefaultJournalDao"
    snapshot = "akka.persistence.jdbc.dao.DefaultSnapshotDao"
  }
}
